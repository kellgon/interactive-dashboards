import React, { useState, useCallback, useMemo } from 'react';

// --- SVG Icons ---
// Using inline SVGs for icons to keep it all in one file.
const MapPin = (props) => (
  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" {...props}>
    <path d="M20 10c0 6-8 12-8 12s-8-6-8-12a8 8 0 0 1 16 0Z" />
    <circle cx="12" cy="10" r="3" />
  </svg>
);

const Layers = (props) => (
  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" {...props}>
    <polygon points="12 2 2 7 12 12 22 7 12 2" />
    <polyline points="2 17 12 22 22 17" />
    <polyline points="2 12 12 17 22 12" />
  </svg>
);

const Ruler = (props) => (
  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" {...props}>
    <path d="M21.3 15.3a2.4 2.4 0 0 1 0 3.4l-2.6 2.6a2.4 2.4 0 0 1-3.4 0L3 8.4a2.4 2.4 0 0 1 0-3.4l2.6-2.6a2.4 2.4 0 0 1 3.4 0L18 11.6a2.4 2.4 0 0 1 3.3 3.7Z" />
    <path d="m17.5 7.5 1 1" />
    <path d="m15 10 1 1" />
    <path d="m12.5 12.5 1 1" />
    <path d="m10 15 1 1" />
    <path d="m7.5 17.5 1 1" />
    <path d="m5 20 1 1" />
  </svg>
);

const CircleDot = (props) => (
  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" {...props}>
    <circle cx="12" cy="12" r="10" />
    <circle cx="12" cy="12" r="1" />
  </svg>
);

const Eye = (props) => (
  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" {...props}>
    <path d="M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z" />
    <circle cx="12" cy="12" r="3" />
  </svg>
);

const X = (props) => (
  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" {...props}>
    <path d="M18 6 6 18" />
    <path d="m6 6 12 12" />
  </svg>
);

const TowerControl = (props) => (
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" {...props}>
        <path d="M12 2a10 10 0 1 0 10 10A10 10 0 0 0 12 2Z"/>
        <path d="M12 18a6 6 0 1 0 0-12 6 6 0 0 0 0 12Z"/>
        <path d="M12 14a2 2 0 1 0 0-4 2 2 0 0 0 0 4Z"/>
    </svg>
);

// --- Mock Data ---
const MOCK_DATA = {
  towers: [
    { id: 't-01', type: 'tower', name: 'Central Tower A', lat: 38.9072, lon: -77.0369, status: 'Active', coverage: 5, operator: 'Own' },
    { id: 't-02', type: 'tower', name: 'North Suburbs Tower', lat: 38.95, lon: -77.05, status: 'Active', coverage: 4.5, operator: 'Own' },
    { id: 't-03', type: 'tower', name: 'Competitor Tower X', lat: 38.88, lon: -77.01, status: 'Active', coverage: 5.5, operator: 'Competitor' },
    { id: 't-04', type: 'tower', name: 'West End Tower', lat: 38.90, lon: -77.08, status: 'Planned', coverage: 5, operator: 'Own' },
    { id: 't-05', type: 'tower', name: 'Riverfront Site', lat: 38.87, lon: -77.03, status: 'Active', coverage: 4, operator: 'Own' },
    { id: 't-06', type: 'tower', name: 'NW Quadrant Tower', lat: 38.97, lon: -77.11, status: 'Active', coverage: 4.8, operator: 'Own' },
    { id: 't-07', type: 'tower', name: 'City Center Hub', lat: 38.93125, lon: -77.075, status: 'Active', coverage: 5.2, operator: 'Own' },
  ],
  hotspots: [
    { id: 'h-01', type: 'churn', name: 'Downtown Churn Zone', lat: 38.91, lon: -77.10, severity: 'High', churnRate: '12.5%' },
    { id: 'h-02', type: 'drops', name: 'Highway 270 Corridor', lat: 38.93, lon: -77.11, severity: 'Medium', dropRate: '8.2%' },
  ],
  censusBlocks: [
    { id: 'cb-01', type: 'census', name: 'Census Block 78-A', lat: 38.92, lon: -77.02, population: 12045, avgIncome: '$85,000' }
  ]
};

// --- Helper to convert Lat/Lon to screen position ---
// This is a simplified projection for mockup purposes.
const projectCoordinates = (lat, lon, mapDimensions) => {
    const { width, height } = mapDimensions;
    // Bounding box for Washington D.C. area (approx)
    const minLat = 38.85, maxLat = 38.98;
    const minLon = -77.12, maxLon = -77.00;
    
    const x = ((lon - minLon) / (maxLon - minLon)) * width;
    const y = ((maxLat - lat) / (maxLat - minLat)) * height;
    
    return { x, y };
};


// --- Components ---

const Header = () => (
  <header className="bg-gray-800 text-white p-3 flex justify-between items-center z-30 shadow-md">
    <div className="flex items-center space-x-3">
      <h1 className="text-xl font-bold">C3 Network Investment Optimizer</h1>
    </div>
    <div className="flex items-center space-x-4">
      <span className="text-sm text-gray-400">User: Network Planner</span>
      <button className="bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 px-4 rounded-lg text-sm transition-colors">
        Export Analysis
      </button>
    </div>
  </header>
);

const LayerControlPanel = ({ layers, toggleLayer }) => (
  <div className="bg-gray-800 p-4 rounded-lg shadow-lg">
    <h3 className="text-lg font-semibold text-white flex items-center mb-4">
      <Layers className="mr-2 text-blue-400" /> Data Layers
    </h3>
    <ul className="space-y-3">
      {Object.keys(layers).map(key => (
        <li key={key}>
          <label className="flex items-center text-gray-300 hover:text-white cursor-pointer">
            <input
              type="checkbox"
              className="h-4 w-4 bg-gray-700 border-gray-600 rounded text-blue-500 focus:ring-blue-500"
              checked={layers[key].visible}
              onChange={() => toggleLayer(key)}
            />
            <span className="ml-3 text-sm">{layers[key].label}</span>
          </label>
        </li>
      ))}
    </ul>
  </div>
);

const AnalysisToolkit = () => (
    <div className="bg-gray-800 p-4 rounded-lg shadow-lg mt-4">
      <h3 className="text-lg font-semibold text-white flex items-center mb-4">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="mr-2 text-blue-400"><path d="M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"></path></svg>
        Analysis Toolkit
      </h3>
      <div className="space-y-2">
        <button className="w-full flex items-center bg-gray-700 hover:bg-gray-600 text-gray-200 font-medium py-2 px-3 rounded-lg transition-colors text-sm">
            <CircleDot className="mr-3 h-5 w-5" /> Draw Candidate Search Ring
        </button>
        <button className="w-full flex items-center bg-gray-700 hover:bg-gray-600 text-gray-200 font-medium py-2 px-3 rounded-lg transition-colors text-sm">
            <Ruler className="mr-3 h-5 w-5" /> Measure Distance
        </button>
        <button className="w-full flex items-center bg-gray-700 hover:bg-gray-600 text-gray-200 font-medium py-2 px-3 rounded-lg transition-colors text-sm">
            <Eye className="mr-3 h-5 w-5" /> Line-of-Sight Analysis
        </button>
      </div>
    </div>
);

const Sidebar = ({ layers, toggleLayer }) => (
  <aside className="w-80 bg-gray-900 text-white p-4 flex flex-col space-y-4 z-20 overflow-y-auto">
    <LayerControlPanel layers={layers} toggleLayer={toggleLayer} />
    <AnalysisToolkit />
  </aside>
);

const MapView = ({ layers, onFeatureClick }) => {
  const mapDimensions = { width: 1200, height: 800 }; // Example dimensions

  const renderHotspotLayer = (layerKey, color, data, sizeClass = 'w-12 h-12') => {
    if (!layers[layerKey].visible) return null;
    return (
      <div className="absolute inset-0 pointer-events-none">
        {data.map(item => {
          const { x, y } = projectCoordinates(item.lat, item.lon, mapDimensions);
          return (
            <div
              key={item.id}
              className="absolute pointer-events-auto cursor-pointer"
              style={{ top: `${y}px`, left: `${x}px`, transform: 'translate(-50%, -50%)' }}
              onClick={() => onFeatureClick(item)}
            >
              <div className={`${sizeClass} rounded-full ${color} opacity-30 animate-pulse`}></div>
              <div className={`absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-4 h-4 rounded-full ${color.replace('opacity-30', 'opacity-90')} border-2 border-white`}></div>
            </div>
          );
        })}
      </div>
    );
  };
  
  const renderTowerLayer = (layerKey, color, data, operatorType) => {
      if(!layers[layerKey].visible) return null;
      return data.filter(t => t.operator === operatorType).map(tower => {
          const {x, y} = projectCoordinates(tower.lat, tower.lon, mapDimensions);
          // Simplified coverage radius calculation
          const radius = tower.coverage * 45;
          return(
              <div key={tower.id} className="absolute pointer-events-auto" style={{ top: `${y}px`, left: `${x}px`, transform: 'translate(-50%, -100%)' }}>
                  {layers.coverageRadii.visible && (
                      <div className={`absolute top-1/2 left-1/2 w-[${radius*2}px] h-[${radius*2}px] -translate-x-1/2 -translate-y-1/2 ${color.replace('text','bg')}/20 rounded-full border ${color.replace('text','border')}`}/>
                  )}
                  <TowerControl className={`${color} h-8 w-8 drop-shadow-lg`} onClick={() => onFeatureClick(tower)} />
              </div>
          )
      })
  }
  
  return (
    <main className="flex-1 bg-gray-700 relative overflow-hidden">
        {/* Mock Map Background */}
        <img src="https://images.unsplash.com/photo-1569336415962-a4bd9f69cd83?q=80&w=2531&auto=format&fit=crop" alt="Geospatial Map Canvas" className="w-full h-full object-cover opacity-80"/>

        {/* --- Data Layers --- */}
        <div className="absolute inset-0">
            {layers.demandForecast.visible && <div className="absolute inset-0 bg-gradient-to-tr from-yellow-500/20 via-orange-500/20 to-red-500/20 pointer-events-none"></div>}
            {renderHotspotLayer('churnHotspots', 'bg-red-500', MOCK_DATA.hotspots.filter(h => h.type === 'churn'))}
            {renderHotspotLayer('droppedCallHotspots', 'bg-purple-500', MOCK_DATA.hotspots.filter(h => h.type === 'drops'), 'w-36 h-36')}
            {renderTowerLayer('ownTowers', 'text-blue-400', MOCK_DATA.towers, 'Own')}
            {renderTowerLayer('competitorTowers', 'text-green-400', MOCK_DATA.towers, 'Competitor')}
        </div>
    </main>
  );
};

const DrillDownPanel = ({ feature, onClose }) => {
  if (!feature) return null;

  const renderFeatureDetails = () => {
    switch (feature.type) {
      case 'tower':
        return (
          <>
            <p><strong className="text-gray-400">Status:</strong> <span className={`font-semibold ${feature.status === 'Active' ? 'text-green-400' : 'text-red-400'}`}>{feature.status}</span></p>
            <p><strong className="text-gray-400">Coverage Radius:</strong> {feature.coverage} km</p>
            <p><strong className="text-gray-400">Operator:</strong> {feature.operator}</p>
            <div className="mt-4 bg-gray-800/50 p-3 rounded-lg">
                <h4 className="font-semibold text-gray-200 mb-2">Historical Performance</h4>
                <p className="text-sm text-gray-400">Data chart placeholder...</p>
                {/* In a real app, a chart component would go here */}
                <div className="h-24 bg-gray-700 rounded mt-2"></div>
            </div>
          </>
        );
      case 'churn':
      case 'drops':
        return (
          <>
            <p><strong className="text-gray-400">Severity:</strong> <span className={`font-semibold ${feature.severity === 'High' ? 'text-red-400' : 'text-yellow-400'}`}>{feature.severity}</span></p>
            {feature.churnRate && <p><strong className="text-gray-400">Churn Rate:</strong> {feature.churnRate}</p>}
            {feature.dropRate && <p><strong className="text-gray-400">Drop Rate:</strong> {feature.dropRate}</p>}
             <div className="mt-4 bg-gray-800/50 p-3 rounded-lg">
                <h4 className="font-semibold text-gray-200 mb-2">Customer Demographics</h4>
                <p className="text-sm text-gray-400">Avg. Plan: $75/mo</p>
                <p className="text-sm text-gray-400">Primary Use: Streaming Video</p>
            </div>
          </>
        );
      case 'census':
         return (
          <>
            <p><strong className="text-gray-400">Population:</strong> {feature.population}</p>
            <p><strong className="text-gray-400">Avg. Household Income:</strong> {feature.avgIncome}</p>
          </>
        );
      default:
        return <p>No details available for this feature.</p>;
    }
  };

  return (
    <div className="absolute top-0 right-0 h-full w-96 bg-gray-900 bg-opacity-90 backdrop-blur-sm text-white p-6 z-30 shadow-2xl transition-transform transform translate-x-0">
      <div className="flex justify-between items-center mb-4">
        <h3 className="text-xl font-bold">{feature.name}</h3>
        <button onClick={onClose} className="text-gray-400 hover:text-white">
          <X className="h-6 w-6" />
        </button>
      </div>
      <div className="space-y-2 text-gray-300">
        <p><strong className="text-gray-400">Type:</strong> <span className="capitalize">{feature.type}</span></p>
        <p><strong className="text-gray-400">Coordinates:</strong> {feature.lat.toFixed(4)}, {feature.lon.toFixed(4)}</p>
        <hr className="border-gray-700 my-4" />
        {renderFeatureDetails()}
      </div>
    </div>
  );
};


// --- Main App Component ---
export default function App() {
  const [layers, setLayers] = useState({
    churnHotspots: { label: 'Churn Hotspots (Gi* Output)', visible: true },
    droppedCallHotspots: { label: 'Dropped Call Rate Hotspots', visible: true },
    ownTowers: { label: 'Existing Tower Locations', visible: true },
    coverageRadii: { label: 'Coverage Radii', visible: true},
    competitorTowers: { label: 'Competitor Tower Locations', visible: false },
    populationDensity: { label: 'Population Density Grids', visible: false },
    demandForecast: { label: 'Demand Forecast Heatmap', visible: true },
    topography: { label: 'Topographical Contours', visible: false },
  });

  const [selectedFeature, setSelectedFeature] = useState(null);

  const toggleLayer = useCallback((key) => {
    setLayers(prev => ({
      ...prev,
      [key]: { ...prev[key], visible: !prev[key].visible },
    }));
  }, []);
  
  const handleFeatureClick = (feature) => {
    setSelectedFeature(feature);
  };
  
  const handlePanelClose = () => {
    setSelectedFeature(null);
  }

  return (
    <div className="h-screen w-screen bg-gray-900 flex flex-col font-sans">
      <Header />
      <div className="flex flex-1 overflow-hidden">
        <Sidebar layers={layers} toggleLayer={toggleLayer} />
        <div className="flex-1 relative">
            <MapView layers={layers} onFeatureClick={handleFeatureClick} />
            <DrillDownPanel feature={selectedFeature} onClose={handlePanelClose} />
        </div>
      </div>
    </div>
  );
}







