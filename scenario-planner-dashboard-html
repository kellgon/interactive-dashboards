import React, { useState, useMemo } from 'react';

// --- Helper Functions & Mock Data ---

// A function to generate mock financial data based on a budget
const calculateFinancials = (budget) => {
  if (!budget || budget <= 0) {
    return {
      totalCost: 0,
      churnReduction: 0,
      retainedRevenue: 0,
      paybackPeriod: 0,
      totalRoi: 0,
    };
  }
  const cost = budget * 0.95; // Assume cost is 95% of budget
  const churnReduction = (Math.log(budget) / Math.log(1000)) * 15;
  const retainedRevenue = cost * (churnReduction / 100) * 3;
  const paybackPeriod = (cost / (retainedRevenue / 12));
  const totalRoi = ((retainedRevenue * 5 - cost) / cost) * 100;

  return {
    totalCost: cost,
    churnReduction: parseFloat(churnReduction.toFixed(2)),
    retainedRevenue: retainedRevenue,
    paybackPeriod: parseFloat(paybackPeriod.toFixed(1)),
    totalRoi: parseFloat(totalRoi.toFixed(2)),
  };
};

// A function to generate random tower locations for the map
const generateLocations = (count) => {
  return Array.from({ length: count }, () => ({
    top: `${Math.random() * 85 + 5}%`,
    left: `${Math.random() * 90 + 5}%`,
  }));
};

// Initial state for the scenarios
const initialScenarios = [
  {
    id: 1,
    name: 'Aggressive 5G Plan',
    budget: 50000000,
    locations: generateLocations(15),
  },
  {
    id: 2,
    name: 'Budget-Constrained Plan',
    budget: 15000000,
    locations: generateLocations(5),
  },
  {
    id: 3,
    name: 'Q3 Priority Plan',
    budget: 32000000,
    locations: generateLocations(10),
  },
];


// --- SVG Icon Components ---

const PlusCircleIcon = ({ className = "w-6 h-6" }) => (
  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}>
    <circle cx="12" cy="12" r="10" />
    <line x1="12" y1="8" x2="12" y2="16" />
    <line x1="8" y1="12" x2="16" y2="12" />
  </svg>
);

const Trash2Icon = ({ className = "w-6 h-6" }) => (
  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}>
    <polyline points="3 6 5 6 21 6" />
    <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2" />
    <line x1="10" y1="11" x2="10" y2="17" />
    <line x1="14" y1="11" x2="14" y2="17" />
  </svg>
);

const XIcon = ({ className = "w-6 h-6" }) => (
  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}>
    <line x1="18" y1="6" x2="6" y2="18" />
    <line x1="6" y1="6" x2="18" y2="18" />
  </svg>
);

const MapPinIcon = ({ className = "w-6 h-6" }) => (
  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}>
    <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z" />
    <circle cx="12" cy="10" r="3" />
  </svg>
);

// --- UI Components ---

const Header = () => (
  <header className="bg-gray-800 text-white p-4 flex justify-between items-center shadow-md z-20">
    <h1 className="text-xl font-bold">C3 Network Investment Optimizer</h1>
    <div className="w-8 h-8 bg-indigo-500 rounded-full flex items-center justify-center text-sm font-semibold">
      FA
    </div>
  </header>
);

const ScenarioManager = ({ scenarios, activeScenarioId, setActiveScenarioId, setScenarios, setScenariosToCompare, scenariosToCompare }) => {
  const addScenario = () => {
    const newId = scenarios.length > 0 ? Math.max(...scenarios.map(s => s.id)) + 1 : 1;
    const newScenario = {
      id: newId,
      name: `New Scenario ${newId}`,
      budget: 10000000,
      locations: generateLocations(7),
    };
    setScenarios([...scenarios, newScenario]);
    setActiveScenarioId(newId);
  };

  const deleteScenario = (idToDelete) => {
    if (scenarios.length <= 1) return; // Prevent deleting the last scenario
    const newScenarios = scenarios.filter(s => s.id !== idToDelete);
    setScenarios(newScenarios);
    setScenariosToCompare(prev => prev.filter(id => id !== idToDelete));
    if (activeScenarioId === idToDelete) {
      setActiveScenarioId(newScenarios[0]?.id || null);
    }
  };

  const handleCompareChange = (id) => {
    setScenariosToCompare(prev =>
      prev.includes(id) ? prev.filter(compId => compId !== id) : [...prev, id]
    );
  };

  return (
    <div className="bg-gray-800 text-white lg:w-1/4 md:w-1/3 p-4 flex flex-col overflow-y-auto">
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-lg font-semibold">Scenario Manager</h2>
        <button onClick={addScenario} className="p-1 text-gray-400 hover:text-white transition-colors">
          <PlusCircleIcon className="w-6 h-6" />
        </button>
      </div>
      <ul className="space-y-2">
        {scenarios.map(scenario => (
          <li key={scenario.id}>
            <div
              onClick={() => setActiveScenarioId(scenario.id)}
              className={`p-3 rounded-lg cursor-pointer transition-all duration-200 group ${activeScenarioId === scenario.id ? 'bg-indigo-600 shadow-lg' : 'bg-gray-700 hover:bg-gray-600'}`}
            >
              <div className="flex items-center justify-between">
                <span className="font-medium truncate">{scenario.name}</span>
                <div className="flex items-center space-x-2">
                   <input
                     type="checkbox"
                     className="form-checkbox h-4 w-4 text-indigo-600 bg-gray-800 border-gray-600 rounded focus:ring-indigo-500"
                     checked={scenariosToCompare.includes(scenario.id)}
                     onChange={() => handleCompareChange(scenario.id)}
                     onClick={(e) => e.stopPropagation()} // Prevent li click
                   />
                  <button onClick={(e) => { e.stopPropagation(); deleteScenario(scenario.id); }} className={`p-1 text-gray-400 hover:text-red-500 opacity-50 group-hover:opacity-100 transition-opacity ${scenarios.length <= 1 ? 'cursor-not-allowed' : ''}`}>
                    <Trash2Icon className="w-5 h-5" />
                  </button>
                </div>
              </div>
            </div>
          </li>
        ))}
      </ul>
       <div className="mt-auto pt-4 text-xs text-gray-500">
          Select two or more scenarios to compare their metrics.
       </div>
    </div>
  );
};

const MapView = ({ scenario }) => {
  return (
    <div className="flex-1 bg-gray-700 p-4 flex flex-col items-center justify-center relative overflow-hidden">
        <h3 className="text-white text-lg font-semibold absolute top-4 left-4 z-10 bg-black bg-opacity-50 px-3 py-1 rounded-lg">
            {scenario ? `${scenario.name}: Candidate Tower Locations` : 'No Scenario Selected'}
        </h3>
        <div className="w-full h-full bg-cover bg-center rounded-lg shadow-inner relative" style={{backgroundImage: "url('https://github.com/kellgon/interactive-dashboards/blob/main/dcmap.png?raw=true')"}}>
            {scenario && scenario.locations.map((loc, index) => (
                <div key={index} className="absolute transform -translate-x-1/2 -translate-y-full" style={{ top: loc.top, left: loc.left }}>
                    <MapPinIcon className="w-6 h-6 text-red-500 fill-current filter drop-shadow-lg" />
                </div>
            ))}
        </div>
    </div>
  );
};

const FinancialPanel = ({ scenario, updateBudget }) => {
    const outputs = useMemo(() => calculateFinancials(scenario?.budget), [scenario?.budget]);
    const formatCurrency = (value) => new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD', minimumFractionDigits: 0, maximumFractionDigits: 0 }).format(value);

    if (!scenario) {
        return <div className="bg-gray-800 text-white lg:w-1/4 md:w-1/3 p-4 flex items-center justify-center"><p>Select a scenario to view details.</p></div>;
    }

    return (
        <div className="bg-gray-800 text-white lg:w-1/4 md:w-1/3 p-6 flex flex-col space-y-6 overflow-y-auto">
            <div>
                <h3 className="text-lg font-semibold mb-3">Financial Inputs</h3>
                <label htmlFor="budget" className="block text-sm font-medium text-gray-400 mb-2">Total Budget Constraint ($)</label>
                <input
                    id="budget"
                    type="number"
                    value={scenario.budget}
                    onChange={(e) => updateBudget(scenario.id, parseInt(e.target.value, 10) || 0)}
                    className="w-full bg-gray-700 text-white border-gray-600 rounded-lg p-2 focus:ring-indigo-500 focus:border-indigo-500 transition"
                    placeholder="Enter budget"
                />
            </div>
            <div>
                <h3 className="text-lg font-semibold mb-3">Calculated Outputs</h3>
                <div className="space-y-3 bg-gray-900/50 p-4 rounded-lg">
                    {Object.entries({
                        "Total Cost": formatCurrency(outputs.totalCost),
                        "Projected Churn Reduction": `${outputs.churnReduction}%`,
                        "Retained Annual Revenue": formatCurrency(outputs.retainedRevenue),
                        "Payback Period": `${outputs.paybackPeriod} Months`,
                        "Total ROI": `${outputs.totalRoi}%`,
                    }).map(([key, value]) => (
                        <div key={key} className="flex justify-between items-center text-sm">
                            <span className="text-gray-400">{key}</span>
                            <span className="font-bold text-indigo-400">{value}</span>
                        </div>
                    ))}
                </div>
            </div>
        </div>
    );
};

const ComparisonView = ({ scenarios, onClose }) => {
    const metrics = ['totalCost', 'churnReduction', 'retainedRevenue', 'paybackPeriod', 'totalRoi'];
    const metricLabels = {
        totalCost: "Total Cost ($)",
        churnReduction: "Churn Reduction (%)",
        retainedRevenue: "Retained Revenue ($)",
        paybackPeriod: "Payback Period (Months)",
        totalRoi: "Total ROI (%)",
    };

    const data = useMemo(() => {
        return scenarios.map(s => ({
            ...s,
            financials: calculateFinancials(s.budget),
        }));
    }, [scenarios]);

    return (
        <div className="fixed inset-0 bg-black bg-opacity-70 flex items-center justify-center z-50 p-4">
            <div className="bg-gray-800 text-white w-full max-w-6xl h-full max-h-[90vh] rounded-xl shadow-2xl flex flex-col">
                <div className="p-4 border-b border-gray-700 flex justify-between items-center">
                    <h2 className="text-xl font-bold">Scenario Comparison</h2>
                    <button onClick={onClose} className="p-1 rounded-full hover:bg-gray-700 transition-colors">
                        <XIcon className="w-6 h-6" />
                    </button>
                </div>
                <div className="flex-1 p-6 overflow-y-auto">
                    <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                        {metrics.map(metric => {
                            const values = data.map(d => d.financials[metric]);
                            const maxVal = Math.max(...values, 1); // Avoid division by zero
                            return (
                                <div key={metric} className="bg-gray-900/50 p-4 rounded-lg">
                                    <h3 className="font-semibold mb-4 text-indigo-300">{metricLabels[metric]}</h3>
                                    <div className="space-y-3">
                                        {data.map(scenarioData => {
                                            const value = scenarioData.financials[metric];
                                            const width = (value / maxVal) * 100;
                                            return (
                                                <div key={scenarioData.id} className="flex items-center">
                                                    <span className="w-1/3 text-sm text-gray-400 truncate pr-2">{scenarioData.name}</span>
                                                    <div className="w-2/3 bg-gray-700 rounded-full h-6">
                                                        <div
                                                            className="bg-indigo-500 h-6 rounded-full flex items-center justify-end px-2 text-xs font-mono"
                                                            style={{ width: `${width}%` }}
                                                        >
                                                           {value.toLocaleString()}
                                                        </div>
                                                    </div>
                                                </div>
                                            );
                                        })}
                                    </div>
                                </div>
                            );
                        })}
                    </div>
                </div>
            </div>
        </div>
    );
};


// --- Main App Component ---

export default function App() {
  const [scenarios, setScenarios] = useState(initialScenarios);
  const [activeScenarioId, setActiveScenarioId] = useState(initialScenarios[0]?.id || null);
  const [scenariosToCompare, setScenariosToCompare] = useState([]);
  const [showComparison, setShowComparison] = useState(false);

  const activeScenario = scenarios.find(s => s.id === activeScenarioId);

  const updateBudget = (id, newBudget) => {
    setScenarios(scenarios.map(s => s.id === id ? { ...s, budget: newBudget } : s));
  };
  
  const comparisonScenarios = scenarios.filter(s => scenariosToCompare.includes(s.id));

  return (
    <div className="h-screen w-screen bg-gray-900 font-sans flex flex-col">
      <Header />
      <div className="flex-1 flex flex-col md:flex-row overflow-hidden">
        <ScenarioManager
          scenarios={scenarios}
          activeScenarioId={activeScenarioId}
          setActiveScenarioId={setActiveScenarioId}
          setScenarios={setScenarios}
          scenariosToCompare={scenariosToCompare}
          setScenariosToCompare={setScenariosToCompare}
        />
        <main className="flex-1 flex flex-col md:flex-row bg-gray-900">
          <MapView scenario={activeScenario} />
          <FinancialPanel scenario={activeScenario} updateBudget={updateBudget} />
        </main>
      </div>
      {scenariosToCompare.length >= 2 && (
         <div className="absolute bottom-5 left-1/2 -translate-x-1/2 z-30">
            <button 
              onClick={() => setShowComparison(true)}
              className="bg-indigo-600 text-white font-bold py-3 px-6 rounded-lg shadow-lg hover:bg-indigo-700 transition-transform hover:scale-105"
            >
              Compare {scenariosToCompare.length} Scenarios
            </button>
         </div>
      )}
      {showComparison && (
        <ComparisonView scenarios={comparisonScenarios} onClose={() => setShowComparison(false)} />
      )}
    </div>
  );
}




